#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClimbFind.Model.LinqToSqlMapping
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CFLive07.29")]
	public partial class CFFeedLinqModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHomepagePartnerCallSetting(HomepagePartnerCallSetting instance);
    partial void UpdateHomepagePartnerCallSetting(HomepagePartnerCallSetting instance);
    partial void DeleteHomepagePartnerCallSetting(HomepagePartnerCallSetting instance);
    partial void InsertFeedClimbingPost(FeedClimbingPost instance);
    partial void UpdateFeedClimbingPost(FeedClimbingPost instance);
    partial void DeleteFeedClimbingPost(FeedClimbingPost instance);
    partial void InsertFeedPostComment(FeedPostComment instance);
    partial void UpdateFeedPostComment(FeedPostComment instance);
    partial void DeleteFeedPostComment(FeedPostComment instance);
    partial void InsertFeedTag(FeedTag instance);
    partial void UpdateFeedTag(FeedTag instance);
    partial void DeleteFeedTag(FeedTag instance);
    partial void InsertFeedClimberChannelRequest(FeedClimberChannelRequest instance);
    partial void UpdateFeedClimberChannelRequest(FeedClimberChannelRequest instance);
    partial void DeleteFeedClimberChannelRequest(FeedClimberChannelRequest instance);
    partial void InsertFeedSetting(FeedSetting instance);
    partial void UpdateFeedSetting(FeedSetting instance);
    partial void DeleteFeedSetting(FeedSetting instance);
    #endregion
		
		public CFFeedLinqModelDataContext() : 
				base(global::ClimbFind.Properties.Settings.Default.CFLive07_29ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CFFeedLinqModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CFFeedLinqModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CFFeedLinqModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CFFeedLinqModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<HomepagePartnerCallSetting> HomepagePartnerCallSettings
		{
			get
			{
				return this.GetTable<HomepagePartnerCallSetting>();
			}
		}
		
		public System.Data.Linq.Table<FeedClimbingPost> FeedClimbingPosts
		{
			get
			{
				return this.GetTable<FeedClimbingPost>();
			}
		}
		
		public System.Data.Linq.Table<FeedPostComment> FeedPostComments
		{
			get
			{
				return this.GetTable<FeedPostComment>();
			}
		}
		
		public System.Data.Linq.Table<FeedTag> FeedTags
		{
			get
			{
				return this.GetTable<FeedTag>();
			}
		}
		
		public System.Data.Linq.Table<FeedClimberChannelRequest> FeedClimberChannelRequests
		{
			get
			{
				return this.GetTable<FeedClimberChannelRequest>();
			}
		}
		
		public System.Data.Linq.Table<FeedSetting> FeedSettings
		{
			get
			{
				return this.GetTable<FeedSetting>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ClimbFind.HomepagePartnerCallSettings")]
	public partial class HomepagePartnerCallSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private byte _Types;
		
		private byte _ViewBy;
		
		private System.Nullable<int> _AreaID;
		
		private string _PlaceIDs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTypesChanging(byte value);
    partial void OnTypesChanged();
    partial void OnViewByChanging(byte value);
    partial void OnViewByChanged();
    partial void OnAreaIDChanging(System.Nullable<int> value);
    partial void OnAreaIDChanged();
    partial void OnPlaceIDsChanging(string value);
    partial void OnPlaceIDsChanged();
    #endregion
		
		public HomepagePartnerCallSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Types", DbType="TinyInt NOT NULL")]
		public byte Types
		{
			get
			{
				return this._Types;
			}
			set
			{
				if ((this._Types != value))
				{
					this.OnTypesChanging(value);
					this.SendPropertyChanging();
					this._Types = value;
					this.SendPropertyChanged("Types");
					this.OnTypesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewBy", DbType="TinyInt NOT NULL")]
		public byte ViewBy
		{
			get
			{
				return this._ViewBy;
			}
			set
			{
				if ((this._ViewBy != value))
				{
					this.OnViewByChanging(value);
					this.SendPropertyChanging();
					this._ViewBy = value;
					this.SendPropertyChanged("ViewBy");
					this.OnViewByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID", DbType="Int")]
		public System.Nullable<int> AreaID
		{
			get
			{
				return this._AreaID;
			}
			set
			{
				if ((this._AreaID != value))
				{
					this.OnAreaIDChanging(value);
					this.SendPropertyChanging();
					this._AreaID = value;
					this.SendPropertyChanged("AreaID");
					this.OnAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceIDs", DbType="NVarChar(255)")]
		public string PlaceIDs
		{
			get
			{
				return this._PlaceIDs;
			}
			set
			{
				if ((this._PlaceIDs != value))
				{
					this.OnPlaceIDsChanging(value);
					this.SendPropertyChanging();
					this._PlaceIDs = value;
					this.SendPropertyChanged("PlaceIDs");
					this.OnPlaceIDsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ClimbFind.FeedClimbingPost")]
	public partial class FeedClimbingPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _UserID;
		
		private int _PlaceID;
		
		private byte _TagID;
		
		private System.DateTime _ClimbingDateTime;
		
		private System.DateTime _PostedDateTime;
		
		private string _Message;
		
		private EntitySet<FeedPostComment> _FeedPostComments;
		
		private EntityRef<FeedTag> _FeedTag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnPlaceIDChanging(int value);
    partial void OnPlaceIDChanged();
    partial void OnTagIDChanging(byte value);
    partial void OnTagIDChanged();
    partial void OnClimbingDateTimeChanging(System.DateTime value);
    partial void OnClimbingDateTimeChanged();
    partial void OnPostedDateTimeChanging(System.DateTime value);
    partial void OnPostedDateTimeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
		
		public FeedClimbingPost()
		{
			this._FeedPostComments = new EntitySet<FeedPostComment>(new Action<FeedPostComment>(this.attach_FeedPostComments), new Action<FeedPostComment>(this.detach_FeedPostComments));
			this._FeedTag = default(EntityRef<FeedTag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceID", DbType="Int NOT NULL")]
		public int PlaceID
		{
			get
			{
				return this._PlaceID;
			}
			set
			{
				if ((this._PlaceID != value))
				{
					this.OnPlaceIDChanging(value);
					this.SendPropertyChanging();
					this._PlaceID = value;
					this.SendPropertyChanged("PlaceID");
					this.OnPlaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="TinyInt NOT NULL")]
		public byte TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					if (this._FeedTag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClimbingDateTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ClimbingDateTime
		{
			get
			{
				return this._ClimbingDateTime;
			}
			set
			{
				if ((this._ClimbingDateTime != value))
				{
					this.OnClimbingDateTimeChanging(value);
					this.SendPropertyChanging();
					this._ClimbingDateTime = value;
					this.SendPropertyChanged("ClimbingDateTime");
					this.OnClimbingDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostedDateTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime PostedDateTime
		{
			get
			{
				return this._PostedDateTime;
			}
			set
			{
				if ((this._PostedDateTime != value))
				{
					this.OnPostedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._PostedDateTime = value;
					this.SendPropertyChanged("PostedDateTime");
					this.OnPostedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(255)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedClimbingPost_FeedPostComment", Storage="_FeedPostComments", ThisKey="ID", OtherKey="FeedPostID")]
		public EntitySet<FeedPostComment> FeedPostComments
		{
			get
			{
				return this._FeedPostComments;
			}
			set
			{
				this._FeedPostComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedTag_FeedClimbingPost", Storage="_FeedTag", ThisKey="TagID", OtherKey="ID", IsForeignKey=true)]
		public FeedTag FeedTag
		{
			get
			{
				return this._FeedTag.Entity;
			}
			set
			{
				FeedTag previousValue = this._FeedTag.Entity;
				if (((previousValue != value) 
							|| (this._FeedTag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeedTag.Entity = null;
						previousValue.FeedClimbingPosts.Remove(this);
					}
					this._FeedTag.Entity = value;
					if ((value != null))
					{
						value.FeedClimbingPosts.Add(this);
						this._TagID = value.ID;
					}
					else
					{
						this._TagID = default(byte);
					}
					this.SendPropertyChanged("FeedTag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeedPostComments(FeedPostComment entity)
		{
			this.SendPropertyChanging();
			entity.FeedClimbingPost = this;
		}
		
		private void detach_FeedPostComments(FeedPostComment entity)
		{
			this.SendPropertyChanging();
			entity.FeedClimbingPost = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ClimbFind.FeedPostComment")]
	public partial class FeedPostComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FeedPostID;
		
		private System.Guid _UserID;
		
		private string _Message;
		
		private System.DateTime _PostedDateTime;
		
		private EntityRef<FeedClimbingPost> _FeedClimbingPost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFeedPostIDChanging(int value);
    partial void OnFeedPostIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnPostedDateTimeChanging(System.DateTime value);
    partial void OnPostedDateTimeChanged();
    #endregion
		
		public FeedPostComment()
		{
			this._FeedClimbingPost = default(EntityRef<FeedClimbingPost>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedPostID", DbType="Int NOT NULL")]
		public int FeedPostID
		{
			get
			{
				return this._FeedPostID;
			}
			set
			{
				if ((this._FeedPostID != value))
				{
					if (this._FeedClimbingPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeedPostIDChanging(value);
					this.SendPropertyChanging();
					this._FeedPostID = value;
					this.SendPropertyChanged("FeedPostID");
					this.OnFeedPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostedDateTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime PostedDateTime
		{
			get
			{
				return this._PostedDateTime;
			}
			set
			{
				if ((this._PostedDateTime != value))
				{
					this.OnPostedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._PostedDateTime = value;
					this.SendPropertyChanged("PostedDateTime");
					this.OnPostedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedClimbingPost_FeedPostComment", Storage="_FeedClimbingPost", ThisKey="FeedPostID", OtherKey="ID", IsForeignKey=true)]
		public FeedClimbingPost FeedClimbingPost
		{
			get
			{
				return this._FeedClimbingPost.Entity;
			}
			set
			{
				FeedClimbingPost previousValue = this._FeedClimbingPost.Entity;
				if (((previousValue != value) 
							|| (this._FeedClimbingPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeedClimbingPost.Entity = null;
						previousValue.FeedPostComments.Remove(this);
					}
					this._FeedClimbingPost.Entity = value;
					if ((value != null))
					{
						value.FeedPostComments.Add(this);
						this._FeedPostID = value.ID;
					}
					else
					{
						this._FeedPostID = default(int);
					}
					this.SendPropertyChanged("FeedClimbingPost");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ClimbFind.FeedTag")]
	public partial class FeedTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ID;
		
		private string _Name;
		
		private string _Category;
		
		private string _Description;
		
		private EntitySet<FeedClimbingPost> _FeedClimbingPosts;
		
		private EntitySet<FeedSetting> _FeedSettings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(byte value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public FeedTag()
		{
			this._FeedClimbingPosts = new EntitySet<FeedClimbingPost>(new Action<FeedClimbingPost>(this.attach_FeedClimbingPosts), new Action<FeedClimbingPost>(this.detach_FeedClimbingPosts));
			this._FeedSettings = new EntitySet<FeedSetting>(new Action<FeedSetting>(this.attach_FeedSettings), new Action<FeedSetting>(this.detach_FeedSettings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedTag_FeedClimbingPost", Storage="_FeedClimbingPosts", ThisKey="ID", OtherKey="TagID")]
		public EntitySet<FeedClimbingPost> FeedClimbingPosts
		{
			get
			{
				return this._FeedClimbingPosts;
			}
			set
			{
				this._FeedClimbingPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedTag_FeedSetting", Storage="_FeedSettings", ThisKey="ID", OtherKey="TagID")]
		public EntitySet<FeedSetting> FeedSettings
		{
			get
			{
				return this._FeedSettings;
			}
			set
			{
				this._FeedSettings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FeedClimbingPosts(FeedClimbingPost entity)
		{
			this.SendPropertyChanging();
			entity.FeedTag = this;
		}
		
		private void detach_FeedClimbingPosts(FeedClimbingPost entity)
		{
			this.SendPropertyChanging();
			entity.FeedTag = null;
		}
		
		private void attach_FeedSettings(FeedSetting entity)
		{
			this.SendPropertyChanging();
			entity.FeedTag = this;
		}
		
		private void detach_FeedSettings(FeedSetting entity)
		{
			this.SendPropertyChanging();
			entity.FeedTag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ClimbFind.FeedClimberChannelRequest")]
	public partial class FeedClimberChannelRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _WatchingUserID;
		
		private System.Guid _WatchedUserID;
		
		private System.DateTime _RequestedDateTime;
		
		private System.Nullable<System.DateTime> _ApprovedDateTime;
		
		private System.Nullable<System.DateTime> _RejectedDateTime;
		
		private bool _WatchingPaused;
		
		private bool _UserBlocked;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWatchingUserIDChanging(System.Guid value);
    partial void OnWatchingUserIDChanged();
    partial void OnWatchedUserIDChanging(System.Guid value);
    partial void OnWatchedUserIDChanged();
    partial void OnRequestedDateTimeChanging(System.DateTime value);
    partial void OnRequestedDateTimeChanged();
    partial void OnApprovedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnApprovedDateTimeChanged();
    partial void OnRejectedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnRejectedDateTimeChanged();
    partial void OnWatchingPausedChanging(bool value);
    partial void OnWatchingPausedChanged();
    partial void OnUserBlockedChanging(bool value);
    partial void OnUserBlockedChanged();
    #endregion
		
		public FeedClimberChannelRequest()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WatchingUserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid WatchingUserID
		{
			get
			{
				return this._WatchingUserID;
			}
			set
			{
				if ((this._WatchingUserID != value))
				{
					this.OnWatchingUserIDChanging(value);
					this.SendPropertyChanging();
					this._WatchingUserID = value;
					this.SendPropertyChanged("WatchingUserID");
					this.OnWatchingUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WatchedUserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid WatchedUserID
		{
			get
			{
				return this._WatchedUserID;
			}
			set
			{
				if ((this._WatchedUserID != value))
				{
					this.OnWatchedUserIDChanging(value);
					this.SendPropertyChanging();
					this._WatchedUserID = value;
					this.SendPropertyChanged("WatchedUserID");
					this.OnWatchedUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestedDateTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime RequestedDateTime
		{
			get
			{
				return this._RequestedDateTime;
			}
			set
			{
				if ((this._RequestedDateTime != value))
				{
					this.OnRequestedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._RequestedDateTime = value;
					this.SendPropertyChanged("RequestedDateTime");
					this.OnRequestedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedDateTime", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ApprovedDateTime
		{
			get
			{
				return this._ApprovedDateTime;
			}
			set
			{
				if ((this._ApprovedDateTime != value))
				{
					this.OnApprovedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._ApprovedDateTime = value;
					this.SendPropertyChanged("ApprovedDateTime");
					this.OnApprovedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RejectedDateTime", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> RejectedDateTime
		{
			get
			{
				return this._RejectedDateTime;
			}
			set
			{
				if ((this._RejectedDateTime != value))
				{
					this.OnRejectedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._RejectedDateTime = value;
					this.SendPropertyChanged("RejectedDateTime");
					this.OnRejectedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WatchingPaused", DbType="Bit NOT NULL")]
		public bool WatchingPaused
		{
			get
			{
				return this._WatchingPaused;
			}
			set
			{
				if ((this._WatchingPaused != value))
				{
					this.OnWatchingPausedChanging(value);
					this.SendPropertyChanging();
					this._WatchingPaused = value;
					this.SendPropertyChanged("WatchingPaused");
					this.OnWatchingPausedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserBlocked", DbType="Bit NOT NULL")]
		public bool UserBlocked
		{
			get
			{
				return this._UserBlocked;
			}
			set
			{
				if ((this._UserBlocked != value))
				{
					this.OnUserBlockedChanging(value);
					this.SendPropertyChanging();
					this._UserBlocked = value;
					this.SendPropertyChanged("UserBlocked");
					this.OnUserBlockedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="ClimbFind.FeedSettings")]
	public partial class FeedSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<int> _AreaID;
		
		private System.Nullable<int> _PlaceID;
		
		private System.Nullable<byte> _TagID;
		
		private byte _CurrentChannelType;
		
		private bool _NotifyOnPostComment;
		
		private bool _NotifyOnPostsICommentedOn;
		
		private byte _PostPrivacySettings;
		
		private EntityRef<FeedTag> _FeedTag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnAreaIDChanging(System.Nullable<int> value);
    partial void OnAreaIDChanged();
    partial void OnPlaceIDChanging(System.Nullable<int> value);
    partial void OnPlaceIDChanged();
    partial void OnTagIDChanging(System.Nullable<byte> value);
    partial void OnTagIDChanged();
    partial void OnCurrentChannelTypeChanging(byte value);
    partial void OnCurrentChannelTypeChanged();
    partial void OnNotifyOnPostCommentChanging(bool value);
    partial void OnNotifyOnPostCommentChanged();
    partial void OnNotifyOnPostsICommentedOnChanging(bool value);
    partial void OnNotifyOnPostsICommentedOnChanged();
    partial void OnPostPrivacySettingsChanging(byte value);
    partial void OnPostPrivacySettingsChanged();
    #endregion
		
		public FeedSetting()
		{
			this._FeedTag = default(EntityRef<FeedTag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID", DbType="Int")]
		public System.Nullable<int> AreaID
		{
			get
			{
				return this._AreaID;
			}
			set
			{
				if ((this._AreaID != value))
				{
					this.OnAreaIDChanging(value);
					this.SendPropertyChanging();
					this._AreaID = value;
					this.SendPropertyChanged("AreaID");
					this.OnAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceID", DbType="Int")]
		public System.Nullable<int> PlaceID
		{
			get
			{
				return this._PlaceID;
			}
			set
			{
				if ((this._PlaceID != value))
				{
					this.OnPlaceIDChanging(value);
					this.SendPropertyChanging();
					this._PlaceID = value;
					this.SendPropertyChanged("PlaceID");
					this.OnPlaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="TinyInt")]
		public System.Nullable<byte> TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					if (this._FeedTag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentChannelType", DbType="TinyInt NOT NULL")]
		public byte CurrentChannelType
		{
			get
			{
				return this._CurrentChannelType;
			}
			set
			{
				if ((this._CurrentChannelType != value))
				{
					this.OnCurrentChannelTypeChanging(value);
					this.SendPropertyChanging();
					this._CurrentChannelType = value;
					this.SendPropertyChanged("CurrentChannelType");
					this.OnCurrentChannelTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotifyOnPostComment", DbType="Bit NOT NULL")]
		public bool NotifyOnPostComment
		{
			get
			{
				return this._NotifyOnPostComment;
			}
			set
			{
				if ((this._NotifyOnPostComment != value))
				{
					this.OnNotifyOnPostCommentChanging(value);
					this.SendPropertyChanging();
					this._NotifyOnPostComment = value;
					this.SendPropertyChanged("NotifyOnPostComment");
					this.OnNotifyOnPostCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotifyOnPostsICommentedOn", DbType="Bit NOT NULL")]
		public bool NotifyOnPostsICommentedOn
		{
			get
			{
				return this._NotifyOnPostsICommentedOn;
			}
			set
			{
				if ((this._NotifyOnPostsICommentedOn != value))
				{
					this.OnNotifyOnPostsICommentedOnChanging(value);
					this.SendPropertyChanging();
					this._NotifyOnPostsICommentedOn = value;
					this.SendPropertyChanged("NotifyOnPostsICommentedOn");
					this.OnNotifyOnPostsICommentedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostPrivacySettings", DbType="TinyInt NOT NULL")]
		public byte PostPrivacySettings
		{
			get
			{
				return this._PostPrivacySettings;
			}
			set
			{
				if ((this._PostPrivacySettings != value))
				{
					this.OnPostPrivacySettingsChanging(value);
					this.SendPropertyChanging();
					this._PostPrivacySettings = value;
					this.SendPropertyChanged("PostPrivacySettings");
					this.OnPostPrivacySettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedTag_FeedSetting", Storage="_FeedTag", ThisKey="TagID", OtherKey="ID", IsForeignKey=true)]
		public FeedTag FeedTag
		{
			get
			{
				return this._FeedTag.Entity;
			}
			set
			{
				FeedTag previousValue = this._FeedTag.Entity;
				if (((previousValue != value) 
							|| (this._FeedTag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeedTag.Entity = null;
						previousValue.FeedSettings.Remove(this);
					}
					this._FeedTag.Entity = value;
					if ((value != null))
					{
						value.FeedSettings.Add(this);
						this._TagID = value.ID;
					}
					else
					{
						this._TagID = default(Nullable<byte>);
					}
					this.SendPropertyChanged("FeedTag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
